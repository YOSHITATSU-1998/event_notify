name: Daily Scraper & Dispatch Ver.2.6 - ローカル時間統一
on:
  workflow_dispatch:
    inputs:
      job_type:
        description: 'Job type to run'
        required: false
        default: 'both'
        type: choice
        options:
          - both
          - pages-only
          - slack-only
  schedule:
    - cron: '30 15 * * *'   # JST 00:30 - Pages更新 + Slack通知（統一）

jobs:
  unified-update:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pages: write
      id-token: write
    env:
      TZ: Asia/Tokyo
      PYTHONPATH: ${{ github.workspace }}/..
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      LINE_TOKEN: ${{ secrets.LINE_TOKEN }}
      MANUAL_PASSWORD: ${{ secrets.MANUAL_PASSWORD }}
      ENABLE_DB_SAVE: "1"
      SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
      SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
      GITHUB_PAGES: "true"
    
    steps:
      - uses: actions/checkout@v4
        with:
          path: event_notify
      
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          python -m pip install -U pip
          if [ -f event_notify/requirements.txt ]; then pip install -r event_notify/requirements.txt; fi
      
      # Ver.2.0: Supabase依存関係追加
      - name: Install Ver.2.0 dependencies
        run: |
          pip install supabase>=1.0.0
          pip install python-dotenv>=0.19.0
          pip install python-dateutil>=2.8.0
      
      - name: Ensure __init__.py files
        run: |
          touch event_notify/__init__.py
          touch event_notify/scrapers/__init__.py
          touch event_notify/utils/__init__.py
          touch event_notify/notify/__init__.py
      
      - name: Debug environment
        run: |
          echo "Working directory: $(pwd)"
          echo "Ver.2.6 Environment Variables:"
          echo "ENABLE_DB_SAVE: $ENABLE_DB_SAVE"
          echo "SUPABASE_URL: ${SUPABASE_URL:0:20}..." # 最初20文字のみ表示
          echo "Directory structure:"
          ls -la event_notify/
          python -c "import event_notify; print('✅ event_notify import OK')"
      
      - name: Run scrapers (Ver.2.6 - 8 venue system with DB integration)
        run: |
          set -e
          echo "🌙 Ver.2.6 スクレイピング開始（ローカル時間統一） - $(date)"
          python -m event_notify.scrapers.marinemesse_a
          python -m event_notify.scrapers.marinemesse_b  
          python -m event_notify.scrapers.kokusai_center
          python -m event_notify.scrapers.congress_b
          python -m event_notify.scrapers.sunpalace
          python -m event_notify.scrapers.paypay_dome
          python -m event_notify.scrapers.paypay_dome_events
          python -m event_notify.scrapers.best_denki_stadium
          echo "✅ Ver.2.6 スクレイピング完了（8会場、ローカル時間統一）"
      
      - name: Generate HTML for web (index.html + manual.html)
        run: |
          set -e
          echo "📄 HTML生成開始"
          mkdir -p site
          cd event_notify
          python -m notify.html_export
          cp -r site/* ../site/
          ls -la ../site/
          echo "✅ HTML生成完了"
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
          ENABLE_DB_SAVE: "1"
          TZ: Asia/Tokyo
      
      - name: Replace password in manual.html
        run: |
          echo "🔐 パスワード置換開始"
          if [ -f site/manual.html ]; then
            sed -i "s/PLACEHOLDER_PASSWORD/${{ secrets.MANUAL_PASSWORD }}/g" site/manual.html
            echo "✅ パスワード置換完了"
          else
            echo "❌ manual.html not found"
            ls -la site/
          fi
        env:
          MANUAL_PASSWORD: ${{ secrets.MANUAL_PASSWORD }}
      
      - name: Setup Pages
        uses: actions/configure-pages@v5
      
      - name: Upload site artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: site
      
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
      
      - name: Setup Node.js for screenshot
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      
      - name: Install Japanese fonts
        run: |
          sudo apt-get update
          sudo apt-get install -y fonts-noto-cjk fonts-noto-cjk-extra
      
      - name: Create package.json if not exists
        run: |
          cd event_notify
          if [ ! -f package.json ]; then
            echo '{"name": "event_notify_screenshots", "version": "1.0.0", "dependencies": {"playwright": "^1.40.0"}}' > package.json
          fi
      
      - name: Install Node.js dependencies and Playwright
        run: |
          cd event_notify
          npm install
          npx playwright install chromium
      
      - name: Take screenshot for audit log
        run: |
          cd event_notify
          echo "📸 スクリーンショット取得開始 - $(date)"
          node screenshots/capture.js
          echo "✅ スクリーンショット取得完了"
      
      - name: Upload screenshot artifact
        uses: actions/upload-artifact@v4
        with:
          name: daily-screenshot-${{ github.run_number }}
          path: event_notify/screenshots/*.jpeg
          retention-days: 90
      
      - name: Prepare manual events for dispatch
        run: |
          echo "📝 手動イベント準備"
          cd event_notify
          mkdir -p manual_events
          if [ ! -f manual_events/oneshot.json ]; then
            echo "[]" > manual_events/oneshot.json
          fi
          if [ ! -f manual_events/recurring.json ]; then
            echo "[]" > manual_events/recurring.json
          fi
          echo "📂 Manual events directory ready"
      
      - name: Get Pages URL for notification
        run: |
          REPO_OWNER=$(echo ${{ github.repository }} | cut -d'/' -f1)
          REPO_NAME=$(echo ${{ github.repository }} | cut -d'/' -f2)
          echo "GITHUB_PAGES_URL=https://${REPO_OWNER}.github.io/${REPO_NAME}/" >> $GITHUB_ENV
      
      - name: Dispatch notification (0:30 unified schedule)
        run: |
          set -e
          echo "📢 統一スケジュール通知開始 - $(date)"
          cd event_notify
          python -m notify.dispatch
          echo "✅ 統一スケジュール通知完了"
        env:
          GITHUB_PAGES_URL: ${{ env.GITHUB_PAGES_URL }}
      
      - name: Ver.2.6 completion log
        run: |
          echo "🎉 Ver.2.6 実行完了 - $(date)"
          echo "📱 Pages URL: ${{ steps.deployment.outputs.page_url }}"
          echo "📊 対応会場: 8会場（ローカル時間統一）"
          echo "🗄️ データベース: Supabase投入完了"
          echo "📝 手動イベント: manual_events/対応"
          echo "📸 スクリーンショット: daily-screenshot-${{ github.run_number }}"
          echo "⏰ 統一スケジュール: 0:30 JST (ローカル時間基準)"
